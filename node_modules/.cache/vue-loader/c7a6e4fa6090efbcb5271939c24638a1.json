{"remainingRequest":"/home/jordan.ren/Documents/amgs-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jordan.ren/Documents/amgs-app/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jordan.ren/Documents/amgs-app/src/App.vue","mtime":1590157462984},{"path":"/home/jordan.ren/Documents/amgs-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jordan.ren/Documents/amgs-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jordan.ren/Documents/amgs-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jordan.ren/Documents/amgs-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgaW1hZ2VzOiBbXSwKICAgICAgdmlkZW9zOiBbXSwKICAgICAgaW1hZ2VEYXRhOiBbXSwKICAgICAgdXBsb2FkaW5nSW1hZ2U6IGZhbHNlLAogICAgICB1cGxvYWRpbmdWaWRlbzogZmFsc2UsCiAgICAgIG91dHB1dEltYWdlOiBudWxsLAogICAgICBvdXRwdXRWaWRlbzogbnVsbCwKICAgICAgd3JvbmdJbWFnZVR5cGU6IGZhbHNlLAogICAgICB3cm9uZ1ZpZGVvVHlwZTogZmFsc2UsCiAgICAgIGJsb2JVUkw6IG51bGwKICAgIH0KICB9LAogIGNvbXB1dGVkOiB7CiAgICBudW1iZXJPZkltYWdlcygpIHsKICAgICAgcmV0dXJuIHRoaXMuaW1hZ2VzLmxlbmd0aDsKICAgIH0sCiAgICBudW1iZXJPZlZpZGVvcygpIHsKICAgICAgcmV0dXJuIHRoaXMudmlkZW9zLmxlbmd0aDsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIG9uSW1hZ2VDaG9zZW4oZXZlbnQpIHsKICAgICAgLyogTG9vcCBvdmVyIGZpbGVzLCBjaGVjayBmb3Igb25seSBpbWFnZXMgKi8KICAgICAgQXJyYXkKICAgICAgICAuZnJvbShBcnJheShldmVudC50YXJnZXQuZmlsZXMubGVuZ3RoKS5rZXlzKCkpCiAgICAgICAgLm1hcCh4ID0+IHsKICAgICAgICAgIGxldCB0YWcgPSBldmVudC50YXJnZXQuZmlsZXNbeF0ubmFtZS5zcGxpdCgiLiIpWzFdOwogICAgICAgICAgaWYgKHRhZyA9PSAicG5nIiB8fCB0YWcgPT0gImpwZWciIHx8IHRhZyA9PSAianBnIikgewogICAgICAgICAgICAvKiBTaW5jZSB3ZSBhcmUgb25seSBkb2luZyBzaW5nbGUgZmlsZXMgZm9yIG5vdywgdGhpcyBpZiBzdGF0ZW1lbnQKICAgICAgICAgICAgICAgIHdpbGwgZW5zdXJlIG9ubHkgb25lIGZpbGUgaXMgc3RvcmVkIGF0IGEgdGltZSAqLwogICAgICAgICAgICBpZiAodGhpcy5pbWFnZXMubGVuZ3RoID09IDEpIHsKICAgICAgICAgICAgICB0aGlzLmltYWdlcyA9IFtdOwogICAgICAgICAgICAgIHRoaXMuaW1hZ2VEYXRhID0gW107CiAgICAgICAgICAgICAgdGhpcy53cm9uZ0ltYWdlVHlwZSA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuc2hvd0ltYWdlKGV2ZW50LCB4KQogICAgICAgICAgICB0aGlzLmltYWdlcy5wdXNoKGV2ZW50LnRhcmdldC5maWxlc1t4XSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLndyb25nSW1hZ2VUeXBlID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0sCiAgICBvblZpZGVvQ2hvc2VuKGV2ZW50KSB7CiAgICAgIC8qIExvb3Agb3ZlciBmaWxlcywgY2hlY2sgZm9yIG9ubHkgdmlkZW9zICovCiAgICAgIEFycmF5CiAgICAgICAgLmZyb20oQXJyYXkoZXZlbnQudGFyZ2V0LmZpbGVzLmxlbmd0aCkua2V5cygpKQogICAgICAgIC5tYXAoeCA9PiB7CiAgICAgICAgICBsZXQgdGFnID0gZXZlbnQudGFyZ2V0LmZpbGVzW3hdLm5hbWUuc3BsaXQoIi4iKVsxXTsKICAgICAgICAgIGlmICh0YWcgPT0gIm1wNCIpIHsKICAgICAgICAgICAgLyogU2luY2Ugd2UgYXJlIG9ubHkgZG9pbmcgc2luZ2xlIGZpbGVzIGZvciBub3csIHRoaXMgaWYgc3RhdGVtZW50CiAgICAgICAgICAgICAgICB3aWxsIGVuc3VyZSBvbmx5IG9uZSBmaWxlIGlzIHN0b3JlZCBhdCBhIHRpbWUgKi8KICAgICAgICAgICAgaWYgKHRoaXMudmlkZW9zLmxlbmd0aCA9PSAxKSB7CiAgICAgICAgICAgICAgdGhpcy52aWRlb3MgPSBbXTsKICAgICAgICAgICAgICB0aGlzLnZpZGVvRGF0YSA9IFtdOwogICAgICAgICAgICAgIHRoaXMud3JvbmdWaWRlb1R5cGUgPSBmYWxzZTsKICAgICAgICAgICAgfSAKICAgICAgICAgICAgdGhpcy5zaG93VmlkZW8oZXZlbnQpOwogICAgICAgICAgICB0aGlzLnZpZGVvcy5wdXNoKGV2ZW50LnRhcmdldC5maWxlc1t4XSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLndyb25nVmlkZW9UeXBlID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0sCiAgICBhc3luYyBvbkltYWdlVXBsb2FkKCkgewogICAgICB0aGlzLnVwbG9hZGluZ0ltYWdlID0gdHJ1ZTsKICAgICAgY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpOwogICAgICBjb25zdCBwYXRoID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC8nOyAvKiBOb3Qgc3VyZSB3aGF0IHRvIHB1dCBoZXJlICovCiAgICAgIHRoaXMub3V0cHV0SW1hZ2UgPSBhd2FpdCBheGlvcy5nZXQocGF0aCk7CiAgICAgIHRoaXMudXBsb2FkaW5nSW1hZ2UgPSBmYWxzZTsKICAgIH0sCiAgICBhc3luYyBvblZpZGVvVXBsb2FkKCkgewogICAgICB0aGlzLnVwbG9hZGluZ1ZpZGVvID0gdHJ1ZTsKICAgICAgY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpOwogICAgICBjb25zdCBwYXRoID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC8nOyAvKiBOb3Qgc3VyZSB3aGF0IHRvIHB1dCBoZXJlICovCiAgICAgIHRoaXMub3V0cHV0VmlkZW8gPSBhd2FpdCBheGlvcy5nZXQocGF0aCk7CiAgICAgIHRoaXMudXBsb2FkaW5nVmlkZW8gPSBmYWxzZTsKICAgIH0sCiAgICBzaG93SW1hZ2UoZXZlbnQsIGkpIHsKICAgICAgdmFyIGlucHV0ID0gZXZlbnQudGFyZ2V0OwogICAgICBpZiAoaW5wdXQuZmlsZXMgJiYgaW5wdXQuZmlsZXNbaV0pIHsKICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgICByZWFkZXIub25sb2FkID0gKGUpID0+IHsKICAgICAgICAgICAgdGhpcy5pbWFnZURhdGEucHVzaChlLnRhcmdldC5yZXN1bHQpOwogICAgICAgIH0KICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChpbnB1dC5maWxlc1tpXSk7CiAgICAgIH0KICAgIH0sCiAgICBzaG93VmlkZW8oZXZlbnQpIHsKICAgICAgbGV0IGZpbGUgPSBldmVudC50YXJnZXQuZmlsZXNbMF07CiAgICAgIHRoaXMuYmxvYlVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSk7CiAgICB9LAogICAgcmVzZXQoZmlsZVR5cGUpIHsKICAgICAgaWYgKGZpbGVUeXBlID09ICJpbWFnZSIpIHsKICAgICAgICB0aGlzLmltYWdlcyA9IFtdOwogICAgICB9IAogICAgICBpZiAoZmlsZVR5cGUgPT0gInZpZGVvIikgewogICAgICAgIHRoaXMudmlkZW9zID0gW107IAogICAgICB9CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <!-- Title -->\n    <div>\n      <h1 style=\"text-align:center\">aMGS Image and Video Upload Tool</h1>\n      <img class=\"center mainImage\" src=\"./assets/Mouse.jpeg\">\n    </div>\n\n    <!-- Image Upload -->\n    <form class=\"split left center\">\n      <h3 style=\"text-align:center\">Images</h3>\n      <input class=\"center\" type=\"file\" accept=\"image/jpeg,image/png\" @change=\"onImageChosen\" v-if=\"!uploadingImage\"><br>\n      <p style=\"text-align:center\" v-if=\"wrongImageType\">\n        Oops! You did not input an image of type png, jpeg, or jpg. <br> Current file to upload: {{ images[0].name }}\n      </p>\n      <div class=\"image-preview\" v-if=\"imageData.length > 0\">\n        <div v-for=\"img in imageData\" :key=\"img\">\n          <img class=\"center preview imageStack\" :src=\"img\">\n        </div>\n      </div>\n      <button class=\"center clear\" @click=\"onImageUpload\" v-if=\"!uploadingImage\"> \n        <p v-if=\"numberOfImages > 1\">Upload Images</p>\n        <p v-else>Upload Image</p>\n      </button>\n      <div class=\"center clear\" v-if=\"uploadingImage\">\n        <h3 style=\"text-align:center\" v-if=\"numberOfImages > 1\">Processing {{ images[0].name }}...</h3>\n        <h3 style=\"text-align:center\" v-else>Processing {{ images[0].name }}...</h3>\n        <div class=\"center loader\"></div>\n      </div>\n    </form>\n\n    <!-- Video Upload -->\n    <form class=\"split right center\">\n      <h3 style=\"text-align:center\">Videos</h3>\n      <input class=\"center\" type=\"file\" accept=\"video/*\" @change=\"onVideoChosen\" v-if=\"!uploadingVideo\"><br>\n      <p style=\"text-align:center\" v-if=\"wrongVideoType\">\n        Oops! You did not input an image of type png, jpeg, or jpg. <br> Current file to upload: {{ videos[0].name }}\n      </p>\n      <video style=\"width:300px\" :src=\"blobURL\" class=\"center\" v-if=\"numberOfVideos > 0\"></video>\n      <button class=\"center clear\" @click=\"onVideoUpload\" v-if=\"!uploadingVideo\">\n        <p v-if=\"numberOfVideos > 1\">Upload Videos</p>\n        <p v-else>Upload Video</p>\n      </button>\n      <div class=\"center clear\" v-if=\"uploadingVideo\">\n        <h3 style=\"text-align:center\" v-if=\"numberOfVideos > 1\">Processing {{ videos[0].name }}...</h3>\n        <h3 style=\"text-align:center\" v-else>Processing {{ videos[0].name }}...</h3>\n        <div class=\"center loader\"></div>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        images: [],\n        videos: [],\n        imageData: [],\n        uploadingImage: false,\n        uploadingVideo: false,\n        outputImage: null,\n        outputVideo: null,\n        wrongImageType: false,\n        wrongVideoType: false,\n        blobURL: null\n      }\n    },\n    computed: {\n      numberOfImages() {\n        return this.images.length;\n      },\n      numberOfVideos() {\n        return this.videos.length;\n      }\n    },\n    methods: {\n      onImageChosen(event) {\n        /* Loop over files, check for only images */\n        Array\n          .from(Array(event.target.files.length).keys())\n          .map(x => {\n            let tag = event.target.files[x].name.split(\".\")[1];\n            if (tag == \"png\" || tag == \"jpeg\" || tag == \"jpg\") {\n              /* Since we are only doing single files for now, this if statement\n                  will ensure only one file is stored at a time */\n              if (this.images.length == 1) {\n                this.images = [];\n                this.imageData = [];\n                this.wrongImageType = false;\n              }\n              this.showImage(event, x)\n              this.images.push(event.target.files[x]);\n            } else {\n              this.wrongImageType = true;\n            }\n          });\n      },\n      onVideoChosen(event) {\n        /* Loop over files, check for only videos */\n        Array\n          .from(Array(event.target.files.length).keys())\n          .map(x => {\n            let tag = event.target.files[x].name.split(\".\")[1];\n            if (tag == \"mp4\") {\n              /* Since we are only doing single files for now, this if statement\n                  will ensure only one file is stored at a time */\n              if (this.videos.length == 1) {\n                this.videos = [];\n                this.videoData = [];\n                this.wrongVideoType = false;\n              } \n              this.showVideo(event);\n              this.videos.push(event.target.files[x]);\n            } else {\n              this.wrongVideoType = true;\n            }\n          });\n      },\n      async onImageUpload() {\n        this.uploadingImage = true;\n        const axios = require('axios');\n        const path = 'http://localhost:8080/'; /* Not sure what to put here */\n        this.outputImage = await axios.get(path);\n        this.uploadingImage = false;\n      },\n      async onVideoUpload() {\n        this.uploadingVideo = true;\n        const axios = require('axios');\n        const path = 'http://localhost:8080/'; /* Not sure what to put here */\n        this.outputVideo = await axios.get(path);\n        this.uploadingVideo = false;\n      },\n      showImage(event, i) {\n        var input = event.target;\n        if (input.files && input.files[i]) {\n          var reader = new FileReader();\n          reader.onload = (e) => {\n              this.imageData.push(e.target.result);\n          }\n          reader.readAsDataURL(input.files[i]);\n        }\n      },\n      showVideo(event) {\n        let file = event.target.files[0];\n        this.blobURL = URL.createObjectURL(file);\n      },\n      reset(fileType) {\n        if (fileType == \"image\") {\n          this.images = [];\n        } \n        if (fileType == \"video\") {\n          this.videos = []; \n        }\n      }\n    }\n  }\n</script>\n\n<style>\n  .split {\n    height: 100%;\n    width: 50%;\n    position: fixed;\n    z-index: 1;\n    overflow-x: hidden;\n    padding-top: 20px;\n    background-color: rgb(149, 214, 240);\n  } \n\n  .left {\n    left: 0;\n    top: 200;\n    }\n\n  .right {\n    right: 0;\n    top: 200;\n  }\n    body{\n      background-color: rgb(149, 214, 240);\n    }\n\n  .loader {\n    border: 16px solid #f3f3f3; /* Light grey */\n    border-top: 16px solid #3498db; /* Blue */\n    border-radius: 50%;\n    width: 120px;\n    height: 120px;\n    animation: spin 2s linear infinite;\n  }\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n\n  img.preview {\n    width: 300px;\n    background-color: white;\n    border: 1px solid #DDD;\n    padding: 5px;\n  }\n\n  .mainImage {\n    border: 1px solid rgb(119, 43, 43);\n    padding: 5px;\n  }\n\n  .imageStack {\n    padding: 5px;\n    display: block; \n    position: relative;\n  }\n\n  .clear {\n    clear: both;\n  }\n\n  .center {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n  }\n</style>"]}]}