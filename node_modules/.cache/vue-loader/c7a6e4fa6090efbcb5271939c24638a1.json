{"remainingRequest":"/home/jordan.ren/Documents/amgs-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jordan.ren/Documents/amgs-app/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jordan.ren/Documents/amgs-app/src/App.vue","mtime":1590185191756},{"path":"/home/jordan.ren/Documents/amgs-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jordan.ren/Documents/amgs-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jordan.ren/Documents/amgs-app/node_modules/vuetify-loader/lib/loader.js","mtime":1590165281306},{"path":"/home/jordan.ren/Documents/amgs-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jordan.ren/Documents/amgs-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCiAgZXhwb3J0IGRlZmF1bHQgewogICAgZGF0YSgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBmaWxlOiBudWxsLAogICAgICAgIGltYWdlRGF0YTogbnVsbCwKICAgICAgICBibG9iVVJMOiBudWxsLAogICAgICAgIGZpbGVUeXBlOiBudWxsLAogICAgICAgIHVwbG9hZGluZ0ZpbGU6IGZhbHNlLAogICAgICAgIGZpbmlzaGVkVXBsb2FkOiBmYWxzZSwKICAgICAgICBvdXRwdXRJbWFnZTogbnVsbCwKICAgICAgICBvdXRwdXRWaWRlbzogbnVsbCwKICAgICAgICB3cm9uZ0ZpbGVUeXBlOiBmYWxzZQogICAgICB9CiAgICB9LAogICAgY29tcHV0ZWQ6IHsKICAgICAgc3RhZ2UoKSB7CiAgICAgICAgaWYgKCF0aGlzLnVwbG9hZGluZ2ZpbGUgJiYgIXRoaXMuZmluaXNoZWRVcGxvYWQpIHsKICAgICAgICAgIHJldHVybiAxOwogICAgICAgIH0gZWxzZSBpZiAodGhpcy51cGxvYWRpbmdGaWxlICYmICF0aGlzLmZpbmlzaGVkVXBsb2FkKSB7CiAgICAgICAgICByZXR1cm4gMjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIDM7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgbWV0aG9kczogewogICAgICBvbkZpbGVDaG9zZW4oZXZlbnQpIHsKICAgICAgICAvKiBMb29wIG92ZXIgZmlsZXMsIGNoZWNrIGZvciBjb3JyZWN0IGZpbGUgdHlwZXMqLwogICAgICAgIEFycmF5CiAgICAgICAgICAuZnJvbShBcnJheShldmVudC50YXJnZXQuZmlsZXMubGVuZ3RoKS5rZXlzKCkpCiAgICAgICAgICAubWFwKHggPT4gewogICAgICAgICAgICBsZXQgdGFnID0gZXZlbnQudGFyZ2V0LmZpbGVzW3hdLm5hbWUuc3BsaXQoIi4iKVsxXTsKICAgICAgICAgICAgaWYgKHRhZyA9PSAicG5nIiB8fCB0YWcgPT0gImpwZWciIHx8IHRhZyA9PSAianBnIikgewogICAgICAgICAgICAgIC8qIFNpbmNlIHdlIGFyZSBvbmx5IGRvaW5nIHNpbmdsZSBmaWxlcyBmb3Igbm93LCB0aGlzIGlmIHN0YXRlbWVudAogICAgICAgICAgICAgICAgICB3aWxsIGVuc3VyZSBvbmx5IG9uZSBmaWxlIGlzIHN0b3JlZCBhdCBhIHRpbWUgKi8KICAgICAgICAgICAgICBpZiAodGhpcy5maWxlICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHRoaXMuZmlsZSA9IG51bGw7CiAgICAgICAgICAgICAgICB0aGlzLmltYWdlRGF0YSA9IG51bGw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRoaXMuc2hvd0ltYWdlKGV2ZW50LCB4KQogICAgICAgICAgICAgIHRoaXMud3JvbmdGaWxlVHlwZSA9IGZhbHNlOwogICAgICAgICAgICAgIHRoaXMuZmlsZVR5cGUgPSAiaW1hZ2UiOwogICAgICAgICAgICAgIHRoaXMuZmlsZSA9IGV2ZW50LnRhcmdldC5maWxlc1t4XTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0YWcgPT0gIm1wNCIpIHsKICAgICAgICAgICAgICBpZiAodGhpcy5maWxlICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHRoaXMuZmlsZSA9IG51bGw7CiAgICAgICAgICAgICAgICB0aGlzLmJsb2JVUkwgPSBudWxsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB0aGlzLndyb25nRmlsZVR5cGUgPSBmYWxzZTsKICAgICAgICAgICAgICB0aGlzLnNob3dWaWRlbyhldmVudCk7CiAgICAgICAgICAgICAgdGhpcy5maWxlVHlwZSA9ICJ2aWRlbyI7CiAgICAgICAgICAgICAgdGhpcy5maWxlID0gZXZlbnQudGFyZ2V0LmZpbGVzW3hdOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRoaXMud3JvbmdGaWxlVHlwZSA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICB9LAogICAgICBhc3luYyBvblVwbG9hZCgpIHsKICAgICAgICB0aGlzLnVwbG9hZGluZ0ZpbGUgPSB0cnVlOwovKiAgICAgICAgIGxldCB0YWcgPSB0aGlzLmZpbGUubmFtZS5zcGxpdCgiLiIpWzFdOwogICAgICAgIGNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTsKICAgICAgICBpZiAodGFnID09ICJtcDQiKSB7CiAgICAgICAgICBjb25zdCBwYXRoID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC92aWRVcGxvYWQnOwogICAgICAgICAgdGhpcy5vdXRwdXRJbWFnZSA9IGF3YWl0IGF4aW9zLmdldChwYXRoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc3QgcGF0aCA9ICdodHRwOi8vbG9jYWxob3N0OjgwODAvaW1nVXBsb2FkJzsKICAgICAgICAgIHRoaXMub3V0cHV0VmlkZW8gPSBhd2FpdCBheGlvcy5nZXQocGF0aCk7CiAgICAgICAgfSAqLwogICAgICAgIHRoaXMuZmluaXNoZWRVcGxvYWQgPSB0cnVlOwogICAgICAgIHRoaXMudXBsb2FkaW5nRmlsZSA9IGZhbHNlOwogICAgICB9LAogICAgICBzaG93SW1hZ2UoZXZlbnQpIHsKICAgICAgICB2YXIgaW5wdXQgPSBldmVudC50YXJnZXQ7CiAgICAgICAgaWYgKGlucHV0LmZpbGVzICYmIGlucHV0LmZpbGVzWzBdKSB7CiAgICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgICAgICAgIHRoaXMuaW1hZ2VEYXRhID0gZS50YXJnZXQucmVzdWx0OwogICAgICAgICAgfQogICAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoaW5wdXQuZmlsZXNbMF0pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgc2hvd1ZpZGVvKGV2ZW50KSB7CiAgICAgICAgbGV0IGZpbGUgPSBldmVudC50YXJnZXQuZmlsZXNbMF07CiAgICAgICAgdGhpcy5ibG9iVVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKTsKICAgICAgfSwKICAgICAgcmVzZXQoKSB7CiAgICAgICAgdGhpcy5maWxlID0gbnVsbDsKICAgICAgICB0aGlzLmltYWdlRGF0YSA9IG51bGw7CiAgICAgICAgdGhpcy5ibG9iVVJMID0gbnVsbDsKICAgICAgICB0aGlzLmZpbGVUeXBlID0gbnVsbDsKICAgICAgICB0aGlzLnVwbG9hZGluZ0ZpbGUgPSBmYWxzZTsKICAgICAgICB0aGlzLm91dHB1dEltYWdlID0gbnVsbDsKICAgICAgICB0aGlzLm91dHB1dFZpZGVvID0gbnVsbDsKICAgICAgICB0aGlzLndyb25nRmlsZVR5cGUgPSBmYWxzZTsKICAgICAgfQogICAgfQogIH0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <v-app id=\"app\">\n    <v-content>\n      <v-container\n        class=\"fill-height\"\n        fluid\n      >\n        <v-row\n          align=\"center\"\n          justify=\"center\"\n        >\n          <v-col\n            cols=\"12\"\n            sm=\"8\"\n            md=\"4\"\n          >\n            <v-card class=\"elevation-12\" style=\"width:500px\">\n              <h1 class=\"display-2\" style=\"text-align: center;\">AMGS Upload Tool </h1>\n              <v-img class=\"mainImage center\" src=\"./assets/Mouse.jpeg\" alt=\"Mouse\"></v-img>\n            </v-card>\n            <v-container grid-list-md></v-container>\n            <v-card class=\"elevation-12 inputcard\">\n              <v-toolbar\n                color=\"primary\"\n                dark\n                flat\n              >\n                <v-toolbar-title>Accepted File Types: <br> jpg, png, jpeg, mp4</v-toolbar-title>\n                <v-spacer></v-spacer>\n                <v-card-actions>\n                  <v-spacer></v-spacer>\n                  <v-btn rounded class=\"info\" style=\"text-align: center\" @click=\"onUpload\" v-if=\"stage == 1\">\n                    <p style=\"top:20px\">Upload File</p>\n                  </v-btn>\n                </v-card-actions> \n              </v-toolbar>\n              <div v-if=\"stage == 1\">\n                <div class=\"area\">\n                  <v-img class=\"icon center\" src=\"./assets/upload.png\" alt=\"upload\"></v-img>\n                  <input id=\"upload\" type=\"file\" accept=\"image/jpeg,image/png,image/jpg,video/mp4\" @change=\"onFileChosen\">\n                </div>\n                <div>\n                  <div class=\"preview\" v-if=\"fileType=='image'\">\n                    <img class=\"preview imageStack\" :src=\"imageData\">\n                  </div>\n                  <video class=\"preview imageStack\" :src=\"blobURL\" v-if=\"fileType=='video'\"></video>\n                  <p style=\"text-align: center\" v-if=\"wrongFileType\">\n                    Oops! You did not input an file of type png, jpeg, jpg, or mp4. <br> Current file to upload: {{ file.name }}\n                  </p>\n                </div>\n              </div>\n              <div v-else>\n                <div class=\"clear center\" v-if=\"stage == 2\">\n                  <h3 style=\"text-align:center\">Processing {{ file.name }}...</h3>\n                  <v-progress-linear\n                    indeterminate\n                    color=\"green\"\n                  ></v-progress-linear>\n                </div>\n              </div>\n              <div v-if=\"stage == 3\">\n                <div v-if=\"fileType=='image'\">\n                  <img class=\"imageStack processedpreview center\" :src=\"imageData\">\n                </div>\n                <video class=\"imageStack processedpreview center\" :src=\"blobURL\" v-if=\"fileType=='video'\"></video>\n                <h1 v-if=\"fileType == 'image'\" :img=\"outputImage\">\n                  Here is the data you want {{ img }}\n                </h1>\n                <h1 v-if=\"fileType == 'video'\" :vid=\"outputVideo\">\n                  Here is the data you want {{ vid }}\n                </h1>\n                <v-btn rounded class=\"info center\" @click=\"reset\">\n                  <p style=\"top:20px\">Upload File</p>\n                </v-btn>\n              </div>\n            </v-card>\n          </v-col>\n        </v-row>\n      </v-container>\n    </v-content>\n  </v-app>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        file: null,\n        imageData: null,\n        blobURL: null,\n        fileType: null,\n        uploadingFile: false,\n        finishedUpload: false,\n        outputImage: null,\n        outputVideo: null,\n        wrongFileType: false\n      }\n    },\n    computed: {\n      stage() {\n        if (!this.uploadingfile && !this.finishedUpload) {\n          return 1;\n        } else if (this.uploadingFile && !this.finishedUpload) {\n          return 2;\n        } else {\n          return 3;\n        }\n      }\n    },\n    methods: {\n      onFileChosen(event) {\n        /* Loop over files, check for correct file types*/\n        Array\n          .from(Array(event.target.files.length).keys())\n          .map(x => {\n            let tag = event.target.files[x].name.split(\".\")[1];\n            if (tag == \"png\" || tag == \"jpeg\" || tag == \"jpg\") {\n              /* Since we are only doing single files for now, this if statement\n                  will ensure only one file is stored at a time */\n              if (this.file != null) {\n                this.file = null;\n                this.imageData = null;\n              }\n              this.showImage(event, x)\n              this.wrongFileType = false;\n              this.fileType = \"image\";\n              this.file = event.target.files[x];\n            } else if (tag == \"mp4\") {\n              if (this.file != null) {\n                this.file = null;\n                this.blobURL = null;\n              }\n              this.wrongFileType = false;\n              this.showVideo(event);\n              this.fileType = \"video\";\n              this.file = event.target.files[x];\n            } else {\n              this.wrongFileType = true;\n            }\n          });\n      },\n      async onUpload() {\n        this.uploadingFile = true;\n/*         let tag = this.file.name.split(\".\")[1];\n        const axios = require('axios');\n        if (tag == \"mp4\") {\n          const path = 'http://localhost:8080/vidUpload';\n          this.outputImage = await axios.get(path);\n        } else {\n          const path = 'http://localhost:8080/imgUpload';\n          this.outputVideo = await axios.get(path);\n        } */\n        this.finishedUpload = true;\n        this.uploadingFile = false;\n      },\n      showImage(event) {\n        var input = event.target;\n        if (input.files && input.files[0]) {\n          var reader = new FileReader();\n          reader.onload = (e) => {\n              this.imageData = e.target.result;\n          }\n          reader.readAsDataURL(input.files[0]);\n        }\n      },\n      showVideo(event) {\n        let file = event.target.files[0];\n        this.blobURL = URL.createObjectURL(file);\n      },\n      reset() {\n        this.file = null;\n        this.imageData = null;\n        this.blobURL = null;\n        this.fileType = null;\n        this.uploadingFile = false;\n        this.outputImage = null;\n        this.outputVideo = null;\n        this.wrongFileType = false;\n      }\n    }\n  }\n</script>\n\n<style>\n  body{\n    background-color: rgb(149, 214, 240);\n  }\n\n\n  img.preview {\n    max-width: 400px;\n    max-height: 200px;\n    background-color: white;\n    border: 1px solid #DDD;\n    padding: 5px;\n  }\n\n  .mainImage {\n    padding: 5px;\n    width: 150px;\n    height: 150px;\n  }\n\n  .imageStack {\n    padding: 5px;\n    display: block; \n    position: relative;\n  }\n\n  .clear {\n    clear: both;\n  }\n\n  .center {\n    display: inline-block;\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  .area {\n    width: 100%;\n    height: 200px;\n    position: absolute;\n    border: 4px dashed #000;\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: 64px 64px;\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n    filter: alpha(opacity=50);\n    -khtml-opacity: 0.5;\n    -moz-opacity: 0.5;\n    opacity: 0.5;\n    text-align: center;\n    background-color: aqua;\n  }\n\n  .area:hover,\n  .area.dragging,\n  .area.uploading {\n      filter: alpha(opacity=100);\n      -khtml-opacity: 1;\n      -moz-opacity: 1;\n      opacity: 1;\n  }\n\n  .area input {\n    width: 500px;  \n    height: 200px;\n    border: none;\n    cursor: pointer;\n    opacity: 0;\n    z-index: 1;\n  }\n\n  .area input:focus {\n      outline: none;\n  }\n\n  .inputcard {\n    width: 500px;\n    height: 500px;\n  }\n\n  .preview {\n    top: 200px;\n    max-height: 200px;\n    max-width: 400px; \n  }\n\n  .processedpreview {\n    max-height: 300px;\n    max-width: 480px; \n  }\n\n  .icon {\n    top: 60px;\n    width: 60px;\n    height: 60px;\n    z-index: 2;\n  }\n</style>\n"]}]}